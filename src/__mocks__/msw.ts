// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck

/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */

/* eslint-disable */

/* tslint:disable */
import { faker } from '@faker-js/faker';
import { HttpResponse, http } from 'msw';
import { setupWorker } from 'msw/browser';

faker.seed(1);

const baseURL = '';
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  http.post(`${baseURL}/auth`, () => {
    const resultArray = [[getLogin200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/auth/refresh`, () => {
    const resultArray = [[getRefresh200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/jobs`, () => {
    const resultArray = [[getGetJobs200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/jobs`, () => {
    const resultArray = [[getAddJob200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/jobs/:id`, () => {
    const resultArray = [[getGetJob200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/jobs/:id`, () => {
    const resultArray = [[getUpdateJob200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/jobs/:id`, () => {
    const resultArray = [];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/projects`, () => {
    const resultArray = [[getGetProjects200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/projects`, () => {
    const resultArray = [[getAddProjects200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.patch(`${baseURL}/projects/:id`, () => {
    const resultArray = [[getUpdateProject200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/projects/:id`, () => {
    const resultArray = [];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
];

export function getLogin200Response() {
  return faker.lorem.slug(1);
}

export function getRefresh200Response() {
  return faker.lorem.slug(1);
}

export function getGetJobs200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
    id: faker.lorem.slug(1),
    kind: faker.helpers.arrayElement(['COMPANY', 'PERSONAL', 'FREELANCE', 'OPEN_SOURCE']),
    name: faker.person.fullName(),
    link: faker.lorem.slug(1),
    github: faker.lorem.slug(1),
    npm: faker.lorem.slug(1),
    isTool: faker.datatype.boolean(),
    address: faker.lorem.slug(1),
  }));
}

export function getAddJob200Response() {
  return faker.lorem.slug(1);
}

export function getGetJob200Response() {
  return {
    id: faker.lorem.slug(1),
    kind: faker.helpers.arrayElement(['COMPANY', 'PERSONAL', 'FREELANCE', 'OPEN_SOURCE']),
    name: faker.person.fullName(),
    link: faker.lorem.slug(1),
    github: faker.lorem.slug(1),
    npm: faker.lorem.slug(1),
    isTool: faker.datatype.boolean(),
    address: faker.lorem.slug(1),
  };
}

export function getUpdateJob200Response() {
  return {
    id: faker.lorem.slug(1),
    kind: faker.helpers.arrayElement(['COMPANY', 'PERSONAL', 'FREELANCE', 'OPEN_SOURCE']),
    name: faker.person.fullName(),
    link: faker.lorem.slug(1),
    github: faker.lorem.slug(1),
    npm: faker.lorem.slug(1),
    isTool: faker.datatype.boolean(),
    address: faker.lorem.slug(1),
  };
}

export function getGetProjects200Response() {
  return [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
    id: faker.lorem.slug(1),
    name: faker.person.fullName(),
    year: faker.number.int({ min: undefined, max: undefined }),
    description: faker.lorem.slug(1),
    notImportant: faker.datatype.boolean(),
    prefix: faker.lorem.slug(1),
    tags: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) =>
      faker.lorem.slug(1),
    ),
    teamSize: faker.lorem.slug(1),
    job: {
      id: faker.lorem.slug(1),
      kind: faker.helpers.arrayElement(['COMPANY', 'PERSONAL', 'FREELANCE', 'OPEN_SOURCE']),
      name: faker.person.fullName(),
      link: faker.lorem.slug(1),
      github: faker.lorem.slug(1),
      npm: faker.lorem.slug(1),
      isTool: faker.datatype.boolean(),
      address: faker.lorem.slug(1),
    },
  }));
}

export function getAddProjects200Response() {
  return faker.lorem.slug(1);
}

export function getUpdateProject200Response() {
  return {
    id: faker.lorem.slug(1),
    year: faker.number.int({ min: undefined, max: undefined }),
    description: faker.lorem.slug(1),
    job: faker.lorem.slug(1),
    name: faker.person.fullName(),
    notImportant: faker.datatype.boolean(),
    prefix: faker.lorem.slug(1),
    tags: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) =>
      faker.lorem.slug(1),
    ),
    teamSize: faker.lorem.slug(1),
  };
}

// This configures a Service Worker with the given request handlers.
export const startWorker = () => {
  const worker = setupWorker(...handlers);
  worker.start();
};
