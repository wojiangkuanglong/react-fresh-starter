/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type client from '@kubb/plugin-client/clients/axios';
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios';
import type { QueryClient, UseMutationOptions } from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';
import { uploadFile } from '../../api/pet/uploadFile.ts';
import type {
  UploadFileMutationRequest,
  UploadFileMutationResponse,
  UploadFilePathParams,
} from '../../model/pet/UploadFile.ts';

export const uploadFileMutationKey = () => [{ url: '/pet/{petId}/uploadImage' }] as const;

export type UploadFileMutationKey = ReturnType<typeof uploadFileMutationKey>;

/**
 * @summary uploads an image
 * {@link /pet/:petId/uploadImage}
 */
export function useUploadFile<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UploadFileMutationResponse,
      ResponseErrorConfig<Error>,
      { petId: UploadFilePathParams['petId']; data?: UploadFileMutationRequest },
      TContext
    > & { client?: QueryClient };
    client?: Partial<RequestConfig<UploadFileMutationRequest>> & { client?: typeof client };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? uploadFileMutationKey();

  return useMutation<
    UploadFileMutationResponse,
    ResponseErrorConfig<Error>,
    { petId: UploadFilePathParams['petId']; data?: UploadFileMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ petId, data }) => {
        return uploadFile({ petId }, data, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  );
}
