/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@/shared/lib/client';
import type { RequestConfig, ResponseErrorConfig } from '@/shared/lib/client';
import type {
  UploadFileMutationRequest,
  UploadFileMutationResponse,
  UploadFilePathParams,
} from '../../model/pet/UploadFile.ts';

function getUploadFileUrl({ petId }: { petId: UploadFilePathParams['petId'] }) {
  const res = { method: 'POST', url: `/pet/${petId}/uploadImage` as const };
  return res;
}

/**
 * @summary uploads an image
 * {@link /pet/:petId/uploadImage}
 */
export async function uploadFile(
  { petId }: { petId: UploadFilePathParams['petId'] },
  data?: UploadFileMutationRequest,
  config: Partial<RequestConfig<UploadFileMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const requestData = data;
  const formData = new FormData();
  if (requestData) {
    Object.keys(requestData).forEach((key) => {
      const value = requestData[key as keyof typeof requestData];
      if (typeof value === 'string' || (value as unknown) instanceof Blob) {
        formData.append(key, value as unknown as string | Blob);
      }
    });
  }
  const res = await request<
    UploadFileMutationResponse,
    ResponseErrorConfig<Error>,
    UploadFileMutationRequest
  >({
    method: 'POST',
    url: getUploadFileUrl({ petId }).url.toString(),
    data: formData,
    ...requestConfig,
    headers: { 'Content-Type': 'multipart/form-data', ...requestConfig.headers },
  });
  return res.data;
}
